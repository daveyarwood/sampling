#!/usr/bin/env bash

set -eo pipefail

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 OUTPUT_DIR"
  exit 1
fi

output_dir="$1"

# Delete any empty directories inside the output directory. (This is to make it
# easier on myself while developing this script. I can run the script as many
# times as I want and not end up with a bunch of empty directories.)
if [[ -d "$output_dir" ]]; then
  find "$output_dir" -maxdepth 1 -type d -empty -exec 'rm' '-rf' '{}' ';'
fi

for cmd in sox soxi; do
  if ! command -v "$cmd" > /dev/null; then
    echo "This script requires $cmd to be on your PATH."
    exit 1
  fi
done

words="/usr/share/dict/american-english"
if ! [[ -f "$words" ]]; then
  echo "This script requires $words to exist."
  exit 1
fi

random_word="$(shuf -n1 "$words")"
sample_pack_dir="$output_dir/$(date '+%Y%m%d%H%M%S')-$random_word"

# NOTE: This is all specific to where I have things stored on my computer. If
# you're reading this and you're not me, just know that this script will not
# work for you without modifications. :)

# I'm not sure if this directory will be stable. May need to do something more
# sophisticated eventually, but for now, this works.
home_dir="/run/user/1000/gvfs/smb-share:server=space-garbage.local,share=home"
music_dir="$home_dir/Music/library"

# Because this is a mounted share and there are so many files, it takes several
# minutes to produce the full list of mp3 files. The list doesn't change much,
# so we'll only fetch it if the list doesn't already exist.
#
# To refresh the list, delete this file and the script will recreate it.
all_mp3_files="$(dirname "$0")/mp3-files.txt"

if ! [[ -f "$all_mp3_files" ]]; then
  echo "Creating mp3 file list. (This will take a while...)"
  sleep 1 # Give the user a second to read the message above
  find "$music_dir" -type f -name '*.mp3' | tee "$all_mp3_files"
  echo
fi

echo "--- $all_mp3_files ---"
echo "last updated: $(date -r "$all_mp3_files")"
echo "mp3 files: $(wc -l < "$all_mp3_files")"
echo

mkdir -p "$sample_pack_dir"

num_songs=4
num_samples_per_song=4

random_mp3_files() {
  shuf -n "$1" "$all_mp3_files"
}

mp3_files="$(random_mp3_files "$num_songs")"
sample_length_s=10

song_number=0

pad_number=0

echo "$mp3_files" | while read -r mp3_file; do
  ((++song_number))

  song_duration_s_float="$(soxi -D "$mp3_file")"
  song_duration_s="${song_duration_s_float%.*}"

  min_duration_s="$((sample_length_s * num_samples_per_song))"

  while [[ "$song_duration_s" -lt "$min_duration_s" ]]; do
    echo "Song is too short: $mp3_file"
    echo "Selecting another song..."

    mp3_file="$(random_mp3_files 1)"
    duration_s_float="$(soxi -D "$mp3_file")"
    song_duration_s="${duration_s_float%.*}"
  done

  # In order to maximize the diversity of the samples, avoid having overlapping
  # samples (it's still technically possible), and order the samples
  # chronologically, we evenly space the start/end times out across the duration
  # of the song.
  interval_s="$((song_duration_s / num_samples_per_song))"

  sample_number=0

  while [[ "$sample_number" -lt "$num_samples_per_song" ]]; do
    ((++pad_number))

    pad_number_padded="$(printf '%02g' "$pad_number")"

    # Pick a random start point between this "interval point" and the next.
    range_start="$((interval_s * sample_number))"
    range_end="$((interval_s * (sample_number + 1)))"

    # Ensure that we don't pick a start point that would result in the sample
    # exceeding the length of the song.
    if [[ "$((range_end + sample_length_s))" -gt "$song_duration_s" ]]; then
      range_end="$((song_duration_s - sample_length_s))"
    fi

    start="$(shuf -i "$range_start-$range_end" -n1)"
    end="$((start + sample_length_s))"

    sox \
      --norm "$mp3_file" \
      "$sample_pack_dir/$pad_number_padded.wav" \
      trim "$start" "$sample_length_s"

    start_m="$((start / 60))"
    start_s="$((start % 60))"
    start_time="$start_m:$(printf '%02g' "$start_s")"
    end_m="$((end / 60))"
    end_s="$((end % 60))"
    end_time="$end_m:$(printf '%02g' "$end_s")"

    echo -e "$pad_number_padded\t$mp3_file\t$start_time - $end_time" \
      | tee -a "$sample_pack_dir/info.txt"

    ((++sample_number))
  done
done

echo
echo "Created sample pack: $sample_pack_dir"
